generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                 @id @default(autoincrement()) @map("id")
  username     String              @unique @db.VarChar(50) @map("username")
  nickname     String?             @db.VarChar(50) @map("nickname")
  email        String              @unique @db.VarChar(100) @map("email")
  password     String              @db.VarChar(255) @map("password")
  avatar       String?             @db.VarChar(255) @map("avatar")
  description  String?             @db.VarChar(500) @map("description")
  country      String?             @db.VarChar(50) @map("country")
  googleId     String?             @unique @map("google_id")
  loggedInAt   DateTime?           @map("logged_in_at")
  createdAt    DateTime            @default(now()) @map("created_time")
  updatedAt    DateTime            @default(now()) @updatedAt @map("updated_time")

  followedBy   FollowRelationship[] @relation("followedBy")
  following    FollowRelationship[] @relation("follower")
  items        Item[]              @relation("ItemsCreatedBy")
  ratings      UserRating[]        @relation("UserRatings")

  @@map("user")
}

model FollowRelationship {
  id          Int      @id @default(autoincrement()) @map("id")
  userId      Int      @map("user_id")
  followerId  Int      @map("follower_id")
  createdAt   DateTime @default(now()) @map("created_time")

  followedBy  User     @relation("followedBy", fields: [userId], references: [id])
  follower    User     @relation("follower", fields: [followerId], references: [id])

  @@unique([userId, followerId])
  @@map("follow_relationship")
}

model AdminUser {
  id         Int       @id @default(autoincrement()) @map("id")
  username   String    @unique @map("username")
  email      String    @unique @map("email")
  password   String    @map("password")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  templates  Template[] @relation("TemplateCreatedBy")
  updatedTemplates Template[] @relation("TemplateUpdatedBy")
  fieldDataSources FieldDataSource[] @relation("FieldDataSourceCreatedBy")

  @@map("admin_user")
}

model FieldDataSource {
  id            Int                     @id @default(autoincrement()) @map("id")
  name          String                  @unique @map("name")
  sourceType    String                  @map("source_type")
  configuration Json?                   @map("configuration")
  createdAt     DateTime                @default(now()) @map("created_at")
  updatedAt     DateTime                @updatedAt @map("updated_at")
  createdBy     Int?                    @map("created_by")
  adminUser     AdminUser?              @relation("FieldDataSourceCreatedBy", fields: [createdBy], references: [id])
  options       FieldDataSourceOption[]
  templateFields TemplateField[]

  @@map("field_data_sources")
}

model FieldDataSourceOption {
  id           Int            @id @default(autoincrement()) @map("id")
  dataSourceId Int            @map("data_source_id")
  value        String         @map("value")
  displayText  String         @map("display_text")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  dataSource   FieldDataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)

  @@unique([dataSourceId, value])
  @@map("field_data_source_options")
}

model Template {
  id           Int            @id @default(autoincrement()) @map("id")
  name         String         @unique @map("name")
  displayName  String         @map("display_name")
  description  String         @map("description")
  fullMarks    Int            @default(10) @map("full_marks")
  isPublished  Boolean        @default(false) @map("is_published")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  createdBy    Int?           @map("created_by")
  updatedBy    Int?           @map("updated_by")
  creator      AdminUser?     @relation("TemplateCreatedBy", fields: [createdBy], references: [id])
  updater      AdminUser?     @relation("TemplateUpdatedBy", fields: [updatedBy], references: [id])
  fields       TemplateField[]
  items        Item[]

  @@map("templates")
}

model TemplateField {
  id             Int            @id @default(autoincrement()) @map("id")
  templateId     Int            @map("template_id")
  name           String         @map("name")
  displayName    String         @map("display_name")
  description    String?        @map("description")
  fieldType      String         @map("field_type")
  isRequired     Boolean        @default(false) @map("is_required")
  isSearchable   Boolean        @default(false) @map("is_searchable")
  isFilterable   Boolean        @default(false) @map("is_filterable")
  displayOrder   Int            @map("display_order")
  dataSourceId   Int?           @map("data_source_id")
  validationRules Json?          @map("validation_rules")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  template       Template       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  dataSource     FieldDataSource? @relation(fields: [dataSourceId], references: [id])
  itemFieldValues ItemFieldValue[]

  @@unique([templateId, name])
  @@map("template_fields")
}

model Item {
  id           Int            @id @default(autoincrement()) @map("id")
  templateId   Int            @map("template_id")
  title        String         @map("title")
  slug         String         @unique @map("slug")
  createdBy    Int?           @map("created_by")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  template     Template       @relation(fields: [templateId], references: [id])
  user         User?          @relation("ItemsCreatedBy", fields: [createdBy], references: [id])
  fieldValues  ItemFieldValue[]
  ratings      UserRating[]
  statistics   ItemStatistics?

  @@unique([templateId, slug])
  @@map("items")
}

model ItemFieldValue {
  id           Int            @id @default(autoincrement()) @map("id")
  itemId       Int            @map("item_id")
  fieldId      Int            @map("field_id")
  textValue    String?        @map("text_value")
  numericValue Float?         @map("numeric_value")
  dateValue    DateTime?      @map("date_value")
  booleanValue Boolean?       @map("boolean_value")
  jsonValue    Json?          @map("json_value")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  item         Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  field        TemplateField  @relation(fields: [fieldId], references: [id])

  @@unique([itemId, fieldId])
  @@map("item_field_values")
}

model UserRating {
  id           Int            @id @default(autoincrement()) @map("id")
  itemId       Int            @map("item_id")
  userId       Int            @map("user_id")
  rating       Decimal        @db.Decimal(3, 1) @map("rating")
  reviewText   String?        @map("review_text")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  item         Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user         User           @relation("UserRatings", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
  @@map("user_ratings")
}

model ItemStatistics {
  itemId           Int       @id @map("item_id")
  avgRating        Decimal   @db.Decimal(4, 2) @default(0) @map("avg_rating")
  ratingsCount     Int       @default(0) @map("ratings_count")
  viewsCount       Int       @default(0) @map("views_count")
  lastCalculatedAt DateTime  @default(now()) @map("last_calculated_at")
  item             Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("item_statistics")
}