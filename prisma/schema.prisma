generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                 @id @default(autoincrement())
  username     String              @unique @db.VarChar(50)
  nickname     String?             @db.VarChar(50)
  email        String              @unique @db.VarChar(100)
  password     String              @db.VarChar(255)
  avatar       String?             @db.VarChar(255)
  description  String?             @db.VarChar(500)
  country      String?             @db.VarChar(50)
  googleId     String?             @unique @map("google_id")
  loggedInAt   DateTime?           @map("logged_in_at")
  createdAt    DateTime            @default(now()) @map("created_time")
  updatedAt    DateTime            @default(now()) @updatedAt @map("updated_time")

  followedBy   FollowRelationship[] @relation("followedBy")
  following    FollowRelationship[] @relation("follower")
  items        Item[]              @relation("ItemsCreatedBy")
  ratings      UserRating[]        @relation("UserRatings")

  @@map("user")
}

model FollowRelationship {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  followerId  Int      @map("follower_id")
  createdAt   DateTime @default(now()) @map("created_time")

  followedBy  User     @relation("followedBy", fields: [userId], references: [id])
  follower    User     @relation("follower", fields: [followerId], references: [id])

  @@unique([userId, followerId])
}

model AdminUser {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  templates  Template[] @relation("TemplateCreatedBy")
  updatedTemplates Template[] @relation("TemplateUpdatedBy")
  fieldDataSources FieldDataSource[] @relation("FieldDataSourceCreatedBy")
}

model FieldDataSource {
  id            Int                     @id @default(autoincrement())
  name          String                  @unique
  sourceType    String
  configuration Json?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  createdBy     Int?
  adminUser     AdminUser?              @relation("FieldDataSourceCreatedBy", fields: [createdBy], references: [id])
  options       FieldDataSourceOption[]
  templateFields TemplateField[]
}

model FieldDataSourceOption {
  id           Int            @id @default(autoincrement())
  dataSourceId Int
  value        String
  displayText  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  dataSource   FieldDataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)
  @@unique([dataSourceId, value])
}

model Template {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  displayName  String
  description  String
  fullMarks    Int            @default(10)
  isPublished  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdBy    Int?
  updatedBy    Int?
  creator      AdminUser?     @relation("TemplateCreatedBy", fields: [createdBy], references: [id])
  updater      AdminUser?     @relation("TemplateUpdatedBy", fields: [updatedBy], references: [id])
  fields       TemplateField[]
  items        Item[]

  @@map("templates")
}

model TemplateField {
  id             Int            @id @default(autoincrement())
  templateId     Int
  name           String
  displayName    String
  description    String?
  fieldType      String
  isRequired     Boolean        @default(false)
  isSearchable   Boolean        @default(false)
  isFilterable   Boolean        @default(false)
  displayOrder   Int
  dataSourceId   Int?
  validationRules Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  template       Template       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  dataSource     FieldDataSource? @relation(fields: [dataSourceId], references: [id])
  itemFieldValues ItemFieldValue[]

  @@unique([templateId, name])
  @@map("template_fields")
}

model Item {
  id           Int            @id @default(autoincrement())
  templateId   Int
  title        String
  slug         String         @unique
  createdBy    Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  template     Template       @relation(fields: [templateId], references: [id])
  user         User?          @relation("ItemsCreatedBy", fields: [createdBy], references: [id])
  fieldValues  ItemFieldValue[]
  ratings      UserRating[]
  statistics   ItemStatistics?

  @@unique([templateId, slug])
  @@map("items")
}

model ItemFieldValue {
  id           Int            @id @default(autoincrement())
  itemId       Int
  fieldId      Int
  textValue    String?
  numericValue Float?
  dateValue    DateTime?
  booleanValue Boolean?
  jsonValue    Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  item         Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  field        TemplateField  @relation(fields: [fieldId], references: [id])

  @@unique([itemId, fieldId])
  @@map("item_field_values")
}

model UserRating {
  id           Int            @id @default(autoincrement())
  itemId       Int
  userId       Int
  rating       Float
  reviewText   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  item         Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user         User           @relation("UserRatings", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
  @@map("user_ratings")
}

model ItemStatistics {
  itemId           Int       @id
  avgRating        Float     @default(0)
  ratingsCount     Int       @default(0)
  viewsCount       Int       @default(0)
  lastCalculatedAt DateTime  @default(now())
  item             Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
}